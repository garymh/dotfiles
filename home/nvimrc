call plug#begin()
  let s:darwin = has('mac')

  Plug 'tpope/vim-sensible'
  Plug 'tpope/vim-unimpaired'

  function! BuildYCM(info)
    if a:info.status == 'installed' || a:info.force
      !./install.sh
    endif
  endfunction

  Plug 'honza/vim-snippets'
  Plug 'SirVer/ultisnips'

  Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }

  Plug 'altercation/vim-colors-solarized'
  Plug 'endel/vim-github-colorscheme'
  Plug 'bling/vim-airline'

  Plug 'tpope/vim-haystack'
  Plug 'ctrlpvim/ctrlp.vim',             { 'on': ['CtrlP', 'CtrlPBuffer', 'CtrlPBookmarkDir', 'CtrlPBookmarkDirAdd', 'CtrlPTag', 'CtrlPLine', 'CtrlPMRU', 'CtrlPDir', 'CtrlPMixed', 'CtrlPRTS'] }

  Plug 'osyo-manga/vim-brightest'
  Plug 'atimholt/spiffy_foldtext'
  Plug 'deris/vim-shot-f'
  Plug 'whatyouhide/vim-gotham'

  Plug 'AndrewRadev/splitjoin.vim',      { 'on': ['SplitjoinJoin', 'SplitjoinSplit'] }
  Plug 'AndrewRadev/switch.vim'
  Plug 'ConradIrwin/vim-bracketed-paste'
  Plug 'Raimondi/delimitMate'
  Plug 'Yggdroot/indentLine'
  Plug 'duff/vim-scratch'
  Plug 'esneider/YUNOcommit.vim'
  Plug 'janko-m/vim-test'
  Plug 'junegunn/vim-easy-align',        { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
  Plug 'justinmk/vim-gtfo'
  Plug 'kristijanhusak/vim-multiple-cursors'
  Plug 'mileszs/ack.vim'
  Plug 'ngmy/vim-rubocop',               { 'for': 'ruby' }
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'tpope/vim-abolish'
  Plug 'tpope/vim-bundler'
  Plug 'tpope/vim-commentary',           { 'on': ['<Plug>Commentary', '<Plug>CommentaryLine', '<Plug>ChangeCommentary'] }
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-git'
  Plug 'tpope/vim-markdown'
  Plug 'tpope/vim-rhubarb'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-dispatch'
  Plug 'tpope/vim-speeddating'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-projectionist'
  Plug 'tpope/vim-vinegar'
  Plug 'vim-scripts/BufOnly.vim'

  Plug 'davejlong/cf-utils.vim',         { 'for': 'coldfusion' }
  Plug 'groenewege/vim-less',            { 'for': 'less' }
  Plug 'kchmck/vim-coffee-script',       { 'for': 'coffee' }
  Plug 'mattn/emmet-vim',                { 'for': ['eruby','html'] }
  Plug 'slim-template/vim-slim'
  Plug 'tpope/vim-jdaddy',               { 'for': 'json' }
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-rake',                 { 'for': 'ruby' }
  Plug 'tpope/vim-rbenv'
  Plug 'vim-ruby/vim-ruby'

  " wellle/targets.vim
  " backup ^^
  Plug 'kana/vim-textobj-user'
  Plug 'kana/vim-textobj-entire'
  Plug 'kana/vim-textobj-indent'
  Plug 'Julian/vim-textobj-brace'
  Plug 'beloglazov/vim-textobj-quotes'

  if s:darwin
    Plug 'rizzatti/dash.vim',            { 'on': ['Dash', '<Plug>DashSearch', '<Plug>DashGlobalSearch'] }
    Plug 'zerowidth/vim-copy-as-rtf',    { 'on': 'CopyRTF' }
    exe 'set t_kB=' . nr2char(27) . '[Z'
  endif
call plug#end()

" General Settings {{{ "
  set cmdheight=2          " hopefully prevents the 'hit enter' prompts
  set expandtab            " auto insert tabs when needed
  set formatprg="par 79" " respect the 80 character lines
  set fileformats=unix,dos,mac
  set gdefault             " assume the /g flag on :s substitutions
  set guicursor=a:blinkon0 " stop blinking
  set hidden               " make unsaved buffers hidden
  set hlsearch             " highlight searched phrases
  set ignorecase           " ignore case sensitivity on searches
  set lazyredraw           " make macros faster
  set nojoinspaces         " use only 1 space after '.' when joining lines
  set shiftround           " indenting to nearest tabstop
  set shortmess=WatAIT     " no interruptive prompts http://items.sjbach.com/319/configuring-vim-right
  set showbreak=â†ª\         " show this character for breaks
  set showmatch            " show matching brackets
  " set showmode             " show the mode
  set smartcase            " smartcase for searching
  set splitbelow           " default split behavior
  set splitright           " default split behavior
  " set title                " change the terminal's title
  set virtualedit=onemore  " allow selection past last character
  set visualbell           " stop beeping

  let g:netrw_liststyle=1
  set softtabstop=2 tabstop=2 shiftwidth=2 expandtab
 " }}} General Settings "

" Colors, themes, airline {{{ "
  set cc=81
  set background=dark

  colorscheme gotham
  let g:airline_theme='gotham'

  let g:airline#extensions#tabline#enabled       = 1
  let g:airline#extensions#tabline#tab_min_count = 0
" }}} Colors, themes, airline "

" AutoCommands {{{ "
  augroup random
    autocmd!
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

  "   " Help mode bindings
  "   " <enter> to follow tag, <bs> to go back, and q to quit.
  "   " From http://ctoomey.com/posts/an-incremental-approach-to-vim/
  "   autocmd filetype help nnoremap <buffer><cr> <c-]>
  "   autocmd filetype help nnoremap <buffer><bs> <c-T>
  "   autocmd filetype help nnoremap <buffer>q :q<cr>

  "   autocmd BufNewFile,BufRead *pryrc set filetype=ruby
  "   autocmd BufNewFile,BufRead *pryrc-helpers.rb set filetype=ruby
  "   autocmd BufNewFile,BufRead Brewfile set filetype=ruby

  "   " jump the top in git commit messages
  "   autocmd FileType cf set commentstring=<!--%s-->
  "   autocmd FileType gitcommit normal gg
  "   autocmd BufReadPost fugitive://* set bufhidden=delete
  augroup END

  augroup configureFolds
    autocmd!
    autocmd FileType vim      setlocal foldmethod=marker
  augroup END
" }}} AutoCommands "

" Folding {{{ "
  set foldlevelstart=99
  nnoremap zr zr:echo &foldlevel<cr>
  nnoremap zm zm:echo &foldlevel<cr>
  nnoremap zR zR:echo &foldlevel<cr>
  nnoremap zM zM:echo &foldlevel<cr>
  nnoremap <space><space> za
" }}} Folding "

" Shortcuts and remaps {{{ "
  let mapleader=","

  " netrw
  nnoremap <space>e :e.<CR>

  " ack
  nnoremap <space>f :Ack<space>

  " i never use H or L's defaults, might as well make them useful!
  noremap H ^
  noremap L $
  vnoremap L g_

  nnoremap Y y$

  " fix movement
  nnoremap j gj
  nnoremap k gk

  " sort lines
  nnoremap <leader>s vip:!sort<cr>
  vnoremap <leader>s :!sort<cr>

  " vimrc editing and sourcing
  nnoremap <leader>sv :source $MYVIMRC<cr>
  nnoremap <leader>ev :vsplit $MYVIMRC<cr>
  nnoremap <leader>ins :PlugInstall<cr>

  " who on earth can reach C-^?
  nnoremap <leader><leader> <C-^>

  " fugitive/git
  nnoremap <leader>gac :Gcommit -m -a ""<left>
  nnoremap <leader>gc :Gcommit -m ""<left>
  nnoremap <silent> <leader>gp :Git push<cr>
  nnoremap <silent> <leader>gs :Gstatus<cr><C-w>20+

  nnoremap <silent> // :nohlsearch<cr>
  nnoremap <leader>w :w<cr>
  nmap <leader>fq cs"'
  nmap <silent> K <Plug>DashSearch

  " <leader>hp = html preview
  " map <silent> <leader>hp :!open -a Safari %<cr><cr>

  nnoremap <leader>. :Scratch<cr>
  " vnoremap <leader>tidy :!tidy -q -i --show-errors 0<cr>
  nnoremap <leader>= mqHmwgg=G`wzt`q

  " copy current filename into system clipboard - mnemonic: (c)urrent(f)ilename
  " this is helpful to paste someone the path you're looking at
  nnoremap <silent> <leader>cf :let @* = expand("%:~")<cr>
  nnoremap <silent> <leader>cn :let @* = expand("%:t")<cr>

  " better copy and paste
  vnoremap <leader>y "+y
  nnoremap <leader>y "+y
  nnoremap <leader>p :set paste<cr>o<esc>"*]p:set nopaste<cr>
  nnoremap <leader>P :set paste<cr>O<esc>"*]P:set nopaste<cr>

  " splits
  nnoremap <leader><bar> <C-w>v<C-w>l
  nnoremap <leader>- <C-w>s

  " quicker close window
  nnoremap <silent>Q :call CloseWindowOrKillBuffer()<cr>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>

  " commonly capitalized commands
  cnoremap W w
  cnoremap Wq wq
  cnoremap Q q

  " auto center after certain commands
  nnoremap <silent> n nzz
  nnoremap <silent> N Nzz
  nnoremap <silent> * *zz
  nnoremap <silent> # #zz
  nnoremap <silent> g* g*zz
  nnoremap <silent> g# g#zz
  nnoremap <silent> <C-o> <C-o>zz
  nnoremap <silent> <C-i> <C-i>zz

  " reselect visual block after indent
  vnoremap < <gv
  vnoremap > >gv

  " git blame
  vmap <Leader>b :<C-U>!git blame <C-R>=expand("%:p") <cr> \| sed -n <C-R>=line("'<") <cr>,<C-R>=line("'>") <cr>p <cr>

  " keep the cursor in place while joining lines
  nnoremap J mzJ`z

  " split lines, opposite of J
  nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

  " expands %% to current file's directory in command-line mode
  cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>

  map <leader><tab> :e.<cr>

  xnoremap <leader>C <esc>:colo github<cr>gv:CopyRTF<cr>:set background=dark<cr>:colo solarized<cr>

" }}} Shortcuts and remaps "

" Surround.vim bindings {{{ "
  " surround bindings: below stolen from YADR (@skwp)
  " <leader># Surround a word with #{ruby interpolation}
  map <leader># ysiw#
  vmap <leader># S#

  " <leader>" Surround a word with "quotes"
  map <leader>" ysiw"
  vmap <leader>" S"

  " <leader>' Surround a word with 'single quotes'
  map <leader>' ysiw'
  vmap <leader>' c'<C-R>"'<ESC>

  " <leader>) or <leader>( Surround a word with (parens)
  " The difference is in whether a space is put in
  map <leader>( ysiw(
  map <leader>) ysiw)
  vmap <leader>( c( <C-R>" )<ESC>
  vmap <leader>) c(<C-R>")<ESC>

  " <leader>[ Surround a word with [brackets]
  map <leader>] ysiw]
  map <leader>[ ysiw[
  vmap <leader>[ c[ <C-R>" ]<ESC>
  vmap <leader>] c[<C-R>"]<ESC>

  " <leader>{ Surround a word with {braces}
  map <leader>} ysiw}
  map <leader>{ ysiw{
  vmap <leader>} c{ <C-R>" }<ESC>
  vmap <leader>{ c{<C-R>"}<ESC>

  " <leader>- and <leader>= for ERB
  map <leader>e- ysil-
  map <leader>e= ysil=
  vmap <leader>e- S-
  vmap <leader>e= S=

  let g:surround_113 = "#{\r}"
  let g:surround_35  = "#{\r}"
  let g:surround_45  = "<% \r %>"
  let g:surround_61  = "<%= \r %>"
" }}} Surround.vim bindings "

" EasyAlign {{{ "
  vmap <Enter> <Plug>(EasyAlign)
  nmap <Leader>aa <Plug>(EasyAlign)ii<CR>
  let g:easy_align_delimiters = {
        \ '>': { 'pattern': '>>\|=>\|>' },
        \ '\': { 'pattern': '\\' },
        \ '/': { 'pattern': '//\+\|/\*\|\*/', 'delimiter_align': 'l', 'ignore_groups': ['!Comment'] },
        \ ']': {
        \     'pattern':       '[[\]]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ ')': {
        \     'pattern':       '[()]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ 'f': {
        \     'pattern': ' \(\S\+(\)\@=',
        \     'left_margin': 0,
        \     'right_margin': 0
        \   },
        \ 'd': {
        \     'pattern': ' \(\S\+\s*[;=]\)\@=',
        \     'left_margin': 0,
        \     'right_margin': 0
        \   }
        \ }
" }}} EasyAlign "

" Ruby {{{ "
  let g:vimrubocop_rubocop_extra_args = "aR"
  let ruby_fold=1

  let g:rails_projections = {
        \ "config/routes.rb": { "command": "routes" }
        \ }
" }}} Ruby "

" Ruby Testing {{{ "
  nnoremap <silent> <leader>t :TestNearest<CR>
  nnoremap <silent> <leader>T :TestFile<CR>
  nnoremap <silent> <leader>a :TestSuite<CR>
  nnoremap <silent> <leader>l :TestLast<CR>
" }}} Ruby Testing "

" Plugin settings {{{ "
  let g:delimitMate_balance_matchpairs = 1
  let g:delimitMate_expand_cr = 1
  let g:delimitMate_expand_space = 1
  let g:UltiSnipsListSnippets = "<C-g><Tab>"
  let g:UltiSnipsExpandTrigger = "<Tab>"
  let g:UltiSnipsJumpForwardTrigger = "<Tab>"
  let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"

  let g:ycm_filetype_blacklist = {
        \ 'qf' : 1,
        \ 'notes' : 1,
        \ 'markdown' : 1,
        \ }
  let g:ycm_complete_in_strings = 0
  let g:ycm_autoclose_preview_window_after_insertion = 1
  " Remove <Tab> from maps lest YCM hijack our mapping from above
  let g:ycm_key_list_select_completion = ['<Down>']
  let g:ycm_key_list_previous_completion = ['<Up>']

  nmap <silent> <C-p> :CtrlP<CR>
  nmap <silent> - :Switch<CR>
  let g:ctrlp_match_window_bottom   = 0
  let g:ctrlp_match_window_reversed = 0
  let g:test#strategy = 'dispatch'
  let g:neocomplete#enable_at_startup = 1
  let g:ctrlp_abbrev = {
  \ 'gmode': 't',
  \ 'abbrevs': [
  \   { 'pattern': '^a ', 'expanded': 'app/'            },
  \   { 'pattern': '^b ', 'expanded': 'bin/'            },
  \   { 'pattern': '^c ', 'expanded': 'app/controller/' },
  \   { 'pattern': '^f ', 'expanded': 'config/'         },
  \   { 'pattern': '^h ', 'expanded': 'app/helper/'     },
  \   { 'pattern': '^l ', 'expanded': 'lib/'            },
  \   { 'pattern': '^m ', 'expanded': 'app/model/'      },
  \   { 'pattern': '^o ', 'expanded': 'log/'            },
  \   { 'pattern': '^t ', 'expanded': 'test/'           },
  \   { 'pattern': '^v ', 'expanded': 'app/views/'      },
  \ ]}

  let g:ctrlp_open_new_file = 'r'

  map  gc  <Plug>Commentary
  nmap gcc <Plug>CommentaryLine
  nmap cgc <Plug>ChangeCommentary
  nmap gcu <Plug>Commentary<Plug>Commentary
  let g:switch_mapping = "-"
  nnoremap sj :SplitjoinSplit<cr>
  nnoremap sk :SplitjoinJoin<cr>
  let g:ackprg = 'ag --nogroup --nocolor --column --line-numbers'
  let g:YUNOcommit_after = 20
  let g:hardtime_default_on = 0
  vnoremap <Leader>v :MultipleCursorsFind <C-R><C-W><CR>
  nnoremap <Leader>v :MultipleCursorsFind <C-R><C-W><CR>
  let g:strip_whitespace_on_save = 1
  let g:better_whitespace_enabled = 0

" }}} Plugin Settings "

" Misc. functions {{{ "
  " from @bling
  function! CloseWindowOrKillBuffer() "{{{
    let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

    if number_of_windows_to_this_buffer > 1
      wincmd c
    else
      bdelete
    endif
  endfunction
" }}} Misc. functions "

" vim: set fdm=marker
