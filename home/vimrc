" ~/.vimrc

let s:darwin = has('mac')

call plug#begin()
  Plug 'tpope/vim-abolish'
  Plug 'tpope/vim-bundler'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-jdaddy', { 'for': 'json' }
  Plug 'tpope/vim-rake',   { 'for': 'ruby' }
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-sensible'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-markdown'
  Plug 'tpope/vim-git'
  Plug 'tpope/vim-eunuch'
  Plug 'bling/vim-airline'
  Plug 'osyo-manga/vim-brightest'
  Plug 'altercation/vim-colors-solarized'
  " Plug 'whatyouhide/vim-gotham'
  Plug 'endel/vim-github-colorscheme'

  Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
  Plug 'justinmk/vim-gtfo'
  Plug 'ConradIrwin/vim-bracketed-paste'
  Plug 'atimholt/spiffy_foldtext'
  Plug 'duff/vim-scratch'
  Plug 'mileszs/ack.vim'
  Plug 'kristijanhusak/vim-multiple-cursors'
  Plug 'vim-scripts/SearchComplete'
  Plug 'mattn/emmet-vim', { 'for': ['eruby','html'] }
  Plug 'Yggdroot/indentLine'
  Plug 'esneider/YUNOcommit.vim'
  Plug 'AndrewRadev/switch.vim'
  Plug 'Raimondi/delimitMate'
  Plug 'xolox/vim-misc'
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'AndrewRadev/splitjoin.vim'
  Plug 'vim-scripts/BufOnly.vim'

  Plug 'Julian/vim-textobj-brace'
  Plug 'beloglazov/vim-textobj-quotes'
  Plug 'glts/vim-textobj-comment'
  Plug 'kana/vim-textobj-entire'
  Plug 'kana/vim-textobj-indent'
  Plug 'kana/vim-textobj-user'
  Plug 'tek/vim-textobj-ruby',        { 'for': ['ruby','eruby'] }
  Plug 'whatyouhide/vim-textobj-erb', { 'for': 'eruby' }
  Plug 'beloglazov/vim-textobj-punctuation'

  Plug 'Shougo/unite-session'
  Plug 'Shougo/unite.vim'
  Plug 'Shougo/vimproc.vim', { 'do': 'make' }

  function! BuildYCM(info)
    if a:info.status == 'installed' || a:info.force
      !./install.sh
    endif
  endfunction

  Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }
  Plug 'honza/vim-snippets'
  Plug 'SirVer/ultisnips'
  Plug 'ervandew/supertab'

  if s:darwin
    Plug 'zerowidth/vim-copy-as-rtf', { 'on': 'CopyRTF' }
    Plug 'Keithbsmiley/investigate.vim'
  endif

  Plug 'ngmy/vim-rubocop',         { 'for': 'ruby' }
  Plug 'tpope/vim-rbenv',          { 'for': 'ruby' }
  Plug 'vim-ruby/vim-ruby',        { 'for': 'ruby' }
  Plug 'janko-m/vim-test'

  Plug 'tpope/vim-rails',          { 'for': 'ruby' }
  Plug 'slim-template/vim-slim'
  Plug 'tmux-plugins/vim-tmux'
  Plug 'davejlong/cf-utils.vim',   { 'for': 'coldfusion' }
  Plug 'groenewege/vim-less',      { 'for': 'less' }
  Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
call plug#end()

" Colors, themes, airline {{{ "
   set cc=81
   syntax enable
   set background=dark

   colorscheme solarized
   let g:airline_theme='solarized'

   let g:airline#extensions#tabline#enabled       = 1
   let g:airline#extensions#tabline#tab_min_count = 0
" }}} Colors, themes, airline "

" General Settings {{{ "
  set cmdheight=2          " hopefully prevents the 'hit enter' prompts
  set expandtab            " auto insert tabs when needed
  set gdefault             " assume the /g flag on :s substitutions
  set guicursor=a:blinkon0 " stop blinking
  set hidden               " make unsaved buffers hidden
  set hlsearch             " highlight searched phrases
  set ignorecase           " ignore case sensitivity on searches
  set lazyredraw           " make macros faster
  set nojoinspaces         " use only 1 space after '.' when joining lines
  set noswapfile           " no swapfiles
  set shiftround           " indenting to nearest tabstop
  set shortmess=WatAIT     " no interruptive prompts http://items.sjbach.com/319/configuring-vim-right
  set showbreak=â†ª\         " show this character for breaks
  set showmatch            " show matching brackets
  set showmode             " show the mode
  set smartcase            " smartcase for searching
  set splitbelow           " default split behavior
  set splitright           " default split behavior
  set title                " change the terminal's title
  set ttyfast              " fast terminal
  set virtualedit=onemore  " allow selection past last character
  set visualbell           " stop beeping

  set formatprg = "par 79"

  " let g:netrw_liststyle=3
  set softtabstop=2 tabstop=2 shiftwidth=2 expandtab

 " }}} General Settings "

" Folding {{{ "
  set foldlevelstart=99
  nnoremap zr zr:echo &foldlevel<cr>
  nnoremap zm zm:echo &foldlevel<cr>
  nnoremap zR zR:echo &foldlevel<cr>
  nnoremap zM zM:echo &foldlevel<cr>
  nnoremap <space><space> za
" }}} Folding "

" AutoCommands {{{ "
  augroup random
    autocmd!
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

    " Help mode bindings
    " <enter> to follow tag, <bs> to go back, and q to quit.
    " From http://ctoomey.com/posts/an-incremental-approach-to-vim/
    autocmd filetype help nnoremap <buffer><cr> <c-]>
    autocmd filetype help nnoremap <buffer><bs> <c-T>
    autocmd filetype help nnoremap <buffer>q :q<cr>

    autocmd BufNewFile,BufRead *pryrc set filetype=ruby
    autocmd BufNewFile,BufRead *pryrc-helpers.rb set filetype=ruby

    " jump the top in git commit messages
    autocmd FileType cf set commentstring=<!--%s-->
    autocmd FileType gitcommit normal gg
    autocmd BufReadPost fugitive://* set bufhidden=delete
  augroup END

  augroup configureFolds
    autocmd!
    autocmd FileType mkd      setlocal spell nofoldenable
    autocmd FileType markdown setlocal spell nofoldenable
    autocmd FileType text     setlocal spell nofoldenable
    autocmd FileType vim      setlocal foldmethod=marker
  augroup END
" }}} AutoCommands "

" Shortcuts and remaps {{{ "
  let mapleader=","

  " i never use H or L's defaults, might as well make them useful!
  noremap H ^
  noremap L $
  vnoremap L g_

  nnoremap Y y$

  " i use c-a for tmux, so i need to do this remap
  nnoremap <c-b> <c-a>

  " fix movement
  nnoremap j gj
  nnoremap k gk

  " sort lines
  nnoremap <leader>s vip:!sort<cr>
  vnoremap <leader>s :!sort<cr>

  " vimrc editing and sourcing
  nnoremap <leader>sv :source $MYVIMRC<cr>
  nnoremap <leader>ev :vsplit $MYVIMRC<cr>
  nnoremap <leader>ins :PlugInstall<cr>

  " who on earth can reach C-^?
  nnoremap <leader><leader> <C-^>

  " fugitive/git
  nnoremap <leader>gac :Gcommit -m -a ""<left>
  nnoremap <leader>gc :Gcommit -m ""<left>
  nnoremap <silent> <leader>gp :Git push<cr>
  nnoremap <silent> <leader>gs :Gstatus<cr><C-w>20+

  nnoremap <silent> // :nohlsearch<cr>
  nnoremap <leader>w :w<cr>
  nmap <leader>fq cs"'

  " <leader>hp = html preview
  map <silent> <leader>hp :!open -a Safari %<cr><cr>

  nnoremap <leader>. :Scratch<cr>
  vnoremap <leader>h :!tidy -q -i --show-errors 0<cr>
  nnoremap <leader>= mqHmwgg=G`wzt`q

  " copy current filename into system clipboard - mnemonic: (c)urrent(f)ilename
  " this is helpful to paste someone the path you're looking at
  nnoremap <silent> <leader>cf :let @* = expand("%:~")<cr>
  nnoremap <silent> <leader>cn :let @* = expand("%:t")<cr>

  " better copy and paste
  vnoremap <leader>y "+y
  nnoremap <leader>y "+y
  nnoremap <leader>p :set paste<cr>o<esc>"*]p:set nopaste<cr>
  nnoremap <leader>P :set paste<cr>O<esc>"*]P:set nopaste<cr>

  " splits
  nnoremap <leader><bar> <C-w>v<C-w>l
  nnoremap <leader>- <C-w>s

  " quicker close window
  nnoremap <silent>Q :call CloseWindowOrKillBuffer()<cr>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>

  " commonly capitalized commands
  cnoremap W w
  cnoremap Wq wq
  cnoremap Q q

  " from @bling
  function! CloseWindowOrKillBuffer() "{{{
    let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

    if number_of_windows_to_this_buffer > 1
      wincmd c
    else
      bdelete
    endif
  endfunction

  " auto center after certain commands
  nnoremap <silent> n nzz
  nnoremap <silent> N Nzz
  nnoremap <silent> * *zz
  nnoremap <silent> # #zz
  nnoremap <silent> g* g*zz
  nnoremap <silent> g# g#zz
  nnoremap <silent> <C-o> <C-o>zz
  nnoremap <silent> <C-i> <C-i>zz

"   " Copy paragraph
"   noremap cp yap<S-}>p

"   " Tmux/vim shared navigation
"   nnoremap <C-w>h :TmuxNavigateLeft<cr>
"   nnoremap <C-w>j :TmuxNavigateDown<cr>
"   nnoremap <C-w>k :TmuxNavigateUp<cr>
"   nnoremap <C-w>l :TmuxNavigateRight<cr>

  " reselect visual block after indent
  vnoremap < <gv
  vnoremap > >gv

  " git blame
  vmap <Leader>b :<C-U>!git blame <C-R>=expand("%:p") <cr> \| sed -n <C-R>=line("'<") <cr>,<C-R>=line("'>") <cr>p <cr>

  " keep the cursor in place while joining lines
  nnoremap J mzJ`z

  " split lines, opposite of J
  nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w


  " Surround.vim bindings {{{ "
    " surround bindings: below stolen from YADR (@skwp)
    " <leader># Surround a word with #{ruby interpolation}
    map <leader># ysiw#
    vmap <leader># S#

    " <leader>" Surround a word with "quotes"
    map <leader>" ysiw"
    vmap <leader>" S"

    " <leader>' Surround a word with 'single quotes'
    map <leader>' ysiw'
    vmap <leader>' c'<C-R>"'<ESC>

    " <leader>) or <leader>( Surround a word with (parens)
    " The difference is in whether a space is put in
    map <leader>( ysiw(
    map <leader>) ysiw)
    vmap <leader>( c( <C-R>" )<ESC>
    vmap <leader>) c(<C-R>")<ESC>

    " <leader>[ Surround a word with [brackets]
    map <leader>] ysiw]
    map <leader>[ ysiw[
    vmap <leader>[ c[ <C-R>" ]<ESC>
    vmap <leader>] c[<C-R>"]<ESC>

    " <leader>{ Surround a word with {braces}
    map <leader>} ysiw}
    map <leader>{ ysiw{
    vmap <leader>} c{ <C-R>" }<ESC>
    vmap <leader>{ c{<C-R>"}<ESC>

    " <leader>- and <leader>= for ERB
    map <leader>e- ysil-
    map <leader>e= ysil=
    vmap <leader>e- S-
    vmap <leader>e= S=

    let g:surround_113 = "#{\r}"
    let g:surround_35  = "#{\r}"
    let g:surround_45  = "<% \r %>"
    let g:surround_61  = "<%= \r %>"
  " }}} Surround.vim bindings "

  xnoremap <leader>C <esc>:colo github<cr>gv:CopyRTF<cr>:set background=dark<cr>:colo solarized<cr>

  " EasyAlign {{{ "
  vmap <Enter> <Plug>(EasyAlign)
  nmap <Leader>aa <Plug>(EasyAlign)ii<CR>
  let g:easy_align_delimiters = {
        \ '>': { 'pattern': '>>\|=>\|>' },
        \ '\': { 'pattern': '\\' },
        \ '/': { 'pattern': '//\+\|/\*\|\*/', 'delimiter_align': 'l', 'ignore_groups': ['!Comment'] },
        \ ']': {
        \     'pattern':       '[[\]]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ ')': {
        \     'pattern':       '[()]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ 'f': {
        \     'pattern': ' \(\S\+(\)\@=',
        \     'left_margin': 0,
        \     'right_margin': 0
        \   },
        \ 'd': {
        \     'pattern': ' \(\S\+\s*[;=]\)\@=',
        \     'left_margin': 0,
        \     'right_margin': 0
        \   }
        \ }
  " }}} EasyAlign "

  " Ruby {{{ "
    let g:vimrubocop_rubocop_cmd = "/usr/local/opt/rbenv/shims/rubocop"
    let ruby_fold=1

    let g:rails_projections = {
          \ "config/routes.rb": { "command": "routes" }
          \ }

    " Ruby Testing {{{ "
      nmap <silent> <leader>t :TestNearest<CR>
      nmap <silent> <leader>T :TestFile<CR>
      nmap <silent> <leader>a :TestSuite<CR>
      nmap <silent> <leader>l :TestLast<CR>
    " }}} Ruby Testing "
  " }}} Ruby "

  " Plugin settings {{{ "

    " let g:indentLine_showFirstIndentLevel = 1
    let g:switch_mapping = "-"
    " let delimitMate_expand_cr=1
    " let delimitMate_expand_space=1
    " let delimitMate_balance_matchpairs=1
    nmap sj :SplitjoinSplit<cr>
    nmap sk :SplitjoinJoin<cr>
    let g:ackprg = 'ag --nogroup --nocolor --column --line-numbers'
    let g:YUNOcommit_after = 20
    vnoremap <Leader>v :MultipleCursorsFind <C-R><C-W><CR>
    nnoremap <Leader>v :MultipleCursorsFind <C-R><C-W><CR>
    let g:strip_whitespace_on_save = 1
    let g:better_whitespace_enabled = 0
    " make YCM compatible with UltiSnips (using supertab)
    let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
    let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
    let g:SuperTabDefaultCompletionType = '<C-n>'
    " better key bindings for UltiSnipsExpandTrigger
    let g:UltiSnipsExpandTrigger = "<tab>"
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

    " Unite {{{ "
      nnoremap [unite] <Nop>
      nmap <space> [unite]

      let g:unite_enable_short_source_names       = 1
      let g:unite_source_session_enable_auto_save = 1
      let g:unite_source_history_yank_enable      = 1
      let g:unite_split_rule                      = 'botright'
      let g:unite_winheight                       = 14
      let g:unite_data_directory                  = '~/.vim/tmp/unite'

      if executable('ag')
        " Use ag in unite grep source.
        let g:unite_source_grep_command = 'ag'
        let g:unite_source_grep_default_opts =
              \ '-i --line-numbers --smart-case --nocolor --nogroup --hidden --ignore ' .
              \  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
        let g:unite_source_grep_recursive_opt = ''
      endif

      nnoremap <silent> <C-p> :Unite -toggle -start-insert -buffer-name=files -prompt-direction=top file_rec/async:!<CR>
      nnoremap <silent> [unite]f :<C-u>Unite -no-start-insert grep:.<cr>
      nnoremap <silent> [unite]e :e.<CR>

      nnoremap <silent> [unite]t :Unite -silent -auto-resize -auto-highlight
            \ -buffer-name=task-list vimgrep:%:\\CTODO\:\\<bar>FIXME\:<CR>

      call unite#filters#matcher_default#use(['matcher_fuzzy'])
      call unite#filters#sorter_default#use('sorter_selecta')
      call unite#custom#source('file_rec/async','sorters','sorter_rank')
      call unite#custom#profile('files', 'context.smartcase', 1)
      call unite#custom#source('line,outline','matchers','matcher_fuzzy')

      autocmd FileType unite call s:unite_my_settings()
      function! s:unite_my_settings()
        nmap <buffer> <ESC> <Plug>(unite_exit)
        imap <buffer> <TAB> <Plug>(unite_select_next_line)
        nmap <buffer> Q <plug>(unite_exit)
      endfunction

    " }}} Unite "

  " }}} Plugin settings "

" }}} Shortcuts and remaps "

" vim: set fdm=marker
