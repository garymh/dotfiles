#!/usr/bin/env node

var util    = require('util');
var tldr    = require('../lib/tldr');
var pkg     = require('../package');
var program = require('commander');

program
  .version(pkg.version)
  .usage('commandName [options]')
  //
  // BASIC OPTIONS
  //
  .option('-l, --list', 'List all commands in the cache')
  .option('-r, --random', 'Show a random command')
  .option('-e, --random-example', 'Show a random example')
  .option('-f, --render [file]', 'Render a specific markdown [file]')
  //
  // CACHE MANAGEMENT
  //
  .option('-u, --update', 'Update the local cache')
  .option('-c, --clear-cache', 'Clear the local cache')
  //
  // DEPRECATED SOON
  //
  .option('-o, --os [type]', 'Override the operating system [linux, osx, sunos]');

program.on('--help', function() {
  console.log('Examples');
  console.log('');
  console.log('    $ tldr tar');
  console.log('    $ tldr --list');
  console.log('    $ tldr --random');
  console.log('    $ tldr --random-example');
  console.log('');
  console.log('To control the cache');
  console.log('');
  console.log('    $ tldr --update');
  console.log('    $ tldr --clear-cache');
  console.log('');
  console.log('To render a local file (for testing)');
  console.log('');
  console.log('    $ tldr --render /path/to/file.md');
  console.log('');
});

program.parse(process.argv);

     if (program.list)              tldr.list();
else if (program.random)            tldr.random();
else if (program.randomExample)     tldr.randomExample();
else if (program.clearCache)        tldr.clearCache();
else if (program.update)            tldr.updateCache();
else if (program.render)            tldr.render(program.render);
else if (program.args.length == 1)  tldr.get(program.args[0], program)
else {
  util.log('Usage: tldr <command>');
  process.exit(1);
}
